{
  "address": "0xad8BFAee35f7296629E1851150FDDc601AF0FeD7",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "votes",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCurrentVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x59060425ef5cc0d7f66ec7a230748884b1db123e1d4e856cc07b42561a1e7eec",
  "receipt": {
    "to": null,
    "from": "0x3D0e97eaE73B9795fd27134E9FA4280E1cc1C944",
    "contractAddress": "0xad8BFAee35f7296629E1851150FDDc601AF0FeD7",
    "transactionIndex": 3,
    "gasUsed": "1770330",
    "logsBloom": "0x
    "blockHash": "0x60a6698275a675fa444fbcb55ab6af9fb9d060f154a449d47eac1db5adeadf5a",
    "transactionHash": "0x59060425ef5cc0d7f66ec7a230748884b1db123e1d4e856cc07b42561a1e7eec",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 13369011,
        "transactionHash": "0x59060425ef5cc0d7f66ec7a230748884b1db123e1d4e856cc07b42561a1e7eec",
        "address": "0xad8BFAee35f7296629E1851150FDDc601AF0FeD7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003d0e97eae73b9795fd27134e9fa4280e1cc1c944"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x60a6698275a675fa444fbcb55ab6af9fb9d060f154a449d47eac1db5adeadf5a"
      }
    ],
    "blockNumber": 13369011,
    "cumulativeGasUsed": "1919396",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "e189ae088b156db2e30463c78cbffd45",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\",\"params\":{\"rawAmount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"delegate(address)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\"}},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"getCurrentVotes(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"returns\":{\"_0\":\"The number of current votes for `account`\"}},\"getPriorVotes(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"transfer(address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to transfer\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to transfer\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"The standard EIP-20 approval event\"},\"DelegateChanged(address,address,address)\":{\"notice\":\"An event thats emitted when an account changes its delegate\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"notice\":\"An event thats emitted when a delegate account's vote balance changes\"},\"Transfer(address,address,uint256)\":{\"notice\":\"The standard EIP-20 transfer event\"}},\"kind\":\"user\",\"methods\":{\"DELEGATION_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the delegation struct used by the contract\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkpoints(address,uint32)\":{\"notice\":\"A record of votes checkpoints for each account, by index\"},\"delegate(address)\":{\"notice\":\"Delegate votes from `msg.sender` to `delegatee`\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Delegates votes from signatory to `delegatee`\"},\"delegates(address)\":{\"notice\":\"A record of each accounts delegate\"},\"getCurrentVotes(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"getPriorVotes(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of a block number\"},\"mint(address,uint256)\":{\"notice\":\"Creates `_amount` token to `_to`. Must only be called by the owner (FinaMaster).\"},\"nonces(address)\":{\"notice\":\"A record of states for signing / validating signatures\"},\"numCheckpoints(address)\":{\"notice\":\"The number of checkpoints for each account\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/governance/FinaToken.sol\":\"FinaToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/governance/FinaToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract FinaToken is Ownable {\\n    uint256 private _totalSupply;\\n\\t\\n    string private _name = \\\"FinaToken\\\";\\n    string private _symbol = \\\"FINA\\\";\\n    uint8 private _decimals = 18;\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\t\\n\\tfunction totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @notice Allowance amounts on behalf of others\\n    mapping (address => mapping (address => uint96)) internal allowances;\\n\\n    /// @notice Official record of token balances for each account\\n    mapping (address => uint96) internal balances;\\n\\n    /// @notice A record of each accounts delegate\\n    mapping (address => address) public delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping (address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping (address => uint) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\\n\\n    /// @notice The standard EIP-20 transfer event\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    /// @notice The standard EIP-20 approval event\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint rawAmount) external returns (bool) {\\n        uint96 amount;\\n        if (rawAmount == uint(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(rawAmount, \\\"FinaToken::approve: amount exceeds 96 bits\\\");\\n        }\\n\\n        allowances[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint rawAmount) external returns (bool) {\\n        uint96 amount = safe96(rawAmount, \\\"FinaToken::transfer: amount exceeds 96 bits\\\");\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param rawAmount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint96 spenderAllowance = allowances[src][spender];\\n        uint96 amount = safe96(rawAmount, \\\"FinaToken::approve: amount exceeds 96 bits\\\");\\n\\n        if (spender != src && spenderAllowance != uint96(-1)) {\\n            uint96 newAllowance = sub96(spenderAllowance, amount, \\\"FinaToken::transferFrom: transfer amount exceeds spender allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\t\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (FinaMaster).\\n    function mint(address to, uint rawAmount) public onlyOwner {\\n\\t    uint96 amount = safe96(rawAmount, \\\"FinaToken::mint: amount exceeds 96 bits\\\");\\n        _mint(to, amount);\\n        _moveDelegates(address(0), delegates[to], amount);\\n    }\\t\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) public {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(_name)), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"FinaToken::delegateBySig: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"FinaToken::delegateBySig: invalid nonce\\\");\\n        require(now <= expiry, \\\"FinaToken::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\\n        require(blockNumber < block.number, \\\"FinaToken::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = balances[delegator];\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _transferTokens(address src, address dst, uint96 amount) internal {\\n        require(src != address(0), \\\"FinaToken::_transferTokens: cannot transfer from the zero address\\\");\\n        require(dst != address(0), \\\"FinaToken::_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[src] = sub96(balances[src], amount, \\\"FinaToken::_transferTokens: transfer amount exceeds balance\\\");\\n        balances[dst] = add96(balances[dst], amount, \\\"FinaToken::_transferTokens: transfer amount overflows\\\");\\n        emit Transfer(src, dst, amount);\\n\\n        _moveDelegates(delegates[src], delegates[dst], amount);\\n    }\\n\\t\\n\\tfunction _mint(address account, uint96 amount) internal virtual {\\n        require(account != address(0), \\\"FinaToken: mint to the zero address\\\");\\n\\n        _totalSupply += amount;\\n\\t\\t\\n        balances[account] = add96(balances[account], amount, \\\"Fina::_mint: mint balance amount overflows\\\");\\n\\t\\t\\t\\t\\n        emit Transfer(address(0), account, amount);\\n    }\\t\\n\\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint96 srcRepNew = sub96(srcRepOld, amount, \\\"FinaToken::_moveVotes: vote amount underflows\\\");\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint96 dstRepNew = add96(dstRepOld, amount, \\\"FinaToken::_moveVotes: vote amount overflows\\\");\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\\n      uint32 blockNumber = safe32(block.number, \\\"FinaToken::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n      } else {\\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n          numCheckpoints[delegatee] = nCheckpoints + 1;\\n      }\\n\\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    function getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0xdee07f758a913f4befbe14531813abb42593f0f18103ab7dd20d265d0436c11b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405260096080819052682334b730aa37b5b2b760b91b60a09081526200002c9160029190620000d6565b506040805180820190915260048082526346494e4160e01b60209092019182526200005a91600391620000d6565b506004805460ff191660121790553480156200007557600080fd5b50600062000082620000d2565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35062000172565b3390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200011957805160ff191683800117855562000149565b8280016001018555821562000149579182015b82811115620001495782518255916020019190600101906200012c565b50620001579291506200015b565b5090565b5b808211156200015757600081556001016200015c565b611d6780620001826000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c3578063b4b5ea571161007c578063b4b5ea57146102ae578063c3cda520146102c1578063dd62ed3e146102d4578063e7a324dc146102e7578063f1127ed8146102ef578063f2fde38b146103105761014d565b8063715018a614610250578063782d6fe1146102585780637ecebe00146102785780638da5cb5b1461028b57806395d89b4114610293578063a9059cbb1461029b5761014d565b8063313ce56711610115578063313ce567146101c057806340c10f19146101d5578063587cde1e146101ea5780635c19a95c1461020a5780636fcfff451461021d57806370a082311461023d5761014d565b806306fdde0314610152578063095ea7b31461017057806318160ddd1461019057806320606b70146101a557806323b872dd146101ad575b600080fd5b61015a610323565b60405161016791906117c8565b60405180910390f35b61018361017e3660046115e7565b6103b6565b604051610167919061174e565b610198610475565b6040516101679190611759565b61019861047b565b6101836101bb3660046115a7565b61049f565b6101c86105e6565b6040516101679190611af6565b6101e86101e33660046115e7565b6105ef565b005b6101fd6101f8366004611558565b610691565b604051610167919061173a565b6101e8610218366004611558565b6106ac565b61023061022b366004611558565b6106b9565b6040516101679190611ac6565b61019861024b366004611558565b6106d1565b6101e86106f5565b61026b6102663660046115e7565b61077e565b6040516101679190611b04565b610198610286366004611558565b61098c565b6101fd61099e565b61015a6109ad565b6101836102a93660046115e7565b610a0e565b61026b6102bc366004611558565b610a4a565b6101e86102cf366004611611565b610abb565b6101986102e2366004611573565b610c97565b610198610ccb565b6103026102fd366004611670565b610cef565b604051610167929190611ad7565b6101e861031e366004611558565b610d24565b60028054604080516020601f60001961010060018716150201909416859004938401819004810282018101909252828152606093909290918301828280156103ac5780601f10610381576101008083540402835291602001916103ac565b820191906000526020600020905b81548152906001019060200180831161038f57829003601f168201915b5050505050905090565b6000806000198314156103cc57506000196103f1565b6103ee836040518060600160405280602a8152602001611b81602a9139610de4565b90505b3360008181526005602090815260408083206001600160a01b03891680855292529182902080546001600160601b0319166001600160601b03861617905590519091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610461908590611b04565b60405180910390a360019150505b92915050565b60015490565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6001600160a01b03831660009081526005602090815260408083203380855290835281842054825160608101909352602a80845291936001600160601b039091169285926104f79288929190611b8190830139610de4565b9050866001600160a01b0316836001600160a01b03161415801561052457506001600160601b0382811614155b156105ce57600061054e8383604051806080016040528060428152602001611c5660429139610e13565b6001600160a01b038981166000818152600560209081526040808320948a16808452949091529081902080546001600160601b0319166001600160601b0386161790555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906105c4908590611b04565b60405180910390a3505b6105d9878783610e52565b5060019695505050505050565b60045460ff1690565b6105f7610ff8565b6001600160a01b031661060861099e565b6001600160a01b0316146106375760405162461bcd60e51b815260040161062e90611a2a565b60405180910390fd5b600061065b82604051806060016040528060278152602001611bd860279139610de4565b90506106678382610ffc565b6001600160a01b0380841660009081526007602052604081205461068c9216836110f2565b505050565b6007602052600090815260409020546001600160a01b031681565b6106b63382611284565b50565b60096020526000908152604090205463ffffffff1681565b6001600160a01b03166000908152600660205260409020546001600160601b031690565b6106fd610ff8565b6001600160a01b031661070e61099e565b6001600160a01b0316146107345760405162461bcd60e51b815260040161062e90611a2a565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600043821061079f5760405162461bcd60e51b815260040161062e90611993565b6001600160a01b03831660009081526009602052604090205463ffffffff16806107cd57600091505061046f565b6001600160a01b038416600090815260086020908152604080832063ffffffff600019860181168552925290912054168310610849576001600160a01b03841660009081526008602090815260408083206000199490940163ffffffff1683529290522054600160201b90046001600160601b0316905061046f565b6001600160a01b038416600090815260086020908152604080832083805290915290205463ffffffff1683101561088457600091505061046f565b600060001982015b8163ffffffff168163ffffffff16111561094757600282820363ffffffff160481036108b661152a565b506001600160a01b038716600090815260086020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b031691810191909152908714156109225760200151945061046f9350505050565b805163ffffffff1687111561093957819350610940565b6001820392505b505061088c565b506001600160a01b038516600090815260086020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b600a6020526000908152604090205481565b6000546001600160a01b031690565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103ac5780601f10610381576101008083540402835291602001916103ac565b600080610a33836040518060600160405280602b8152602001611bff602b9139610de4565b9050610a40338583610e52565b5060019392505050565b6001600160a01b03811660009081526009602052604081205463ffffffff1680610a75576000610ab4565b6001600160a01b0383166000908152600860209081526040808320600019850163ffffffff168452909152902054600160201b90046001600160601b03165b9392505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666002604051610aed91906116af565b6040518091039020610afd61130e565b30604051602001610b119493929190611786565b60405160208183030381529060405280519060200120905060007fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf888888604051602001610b629493929190611762565b60405160208183030381529060405280519060200120905060008282604051602001610b8f92919061171f565b604051602081830303815290604052805190602001209050600060018288888860405160008152602001604052604051610bcc94939291906117aa565b6020604051602081039080840390855afa158015610bee573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610c215760405162461bcd60e51b815260040161062e906119df565b6001600160a01b0381166000908152600a602052604090208054600181019091558914610c605760405162461bcd60e51b815260040161062e906118ac565b87421115610c805760405162461bcd60e51b815260040161062e9061181b565b610c8a818b611284565b505050505b505050505050565b6001600160a01b0391821660009081526005602090815260408083209390941682529190915220546001600160601b031690565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b600860209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b610d2c610ff8565b6001600160a01b0316610d3d61099e565b6001600160a01b031614610d635760405162461bcd60e51b815260040161062e90611a2a565b6001600160a01b038116610d895760405162461bcd60e51b815260040161062e90611866565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600081600160601b8410610e0b5760405162461bcd60e51b815260040161062e91906117c8565b509192915050565b6000836001600160601b0316836001600160601b031611158290610e4a5760405162461bcd60e51b815260040161062e91906117c8565b505050900390565b6001600160a01b038316610e785760405162461bcd60e51b815260040161062e90611a5f565b6001600160a01b038216610e9e5760405162461bcd60e51b815260040161062e906118f3565b6001600160a01b03831660009081526006602090815260409182902054825160608101909352603b808452610ee9936001600160601b039092169285929190611c9890830139610e13565b6001600160a01b03848116600090815260066020908152604080832080546001600160601b0319166001600160601b03968716179055928616825290829020548251606081019093526035808452610f519491909116928592909190611cd390830139611312565b6001600160a01b038381166000818152600660205260409081902080546001600160601b0319166001600160601b0395909516949094179093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610fbe908590611b04565b60405180910390a36001600160a01b0380841660009081526007602052604080822054858416835291205461068c929182169116836110f2565b3390565b6001600160a01b0382166110225760405162461bcd60e51b815260040161062e90611950565b600180546001600160601b038381169091019091556001600160a01b03831660009081526006602090815260409182902054825160608101909352602a80845261107c9491909116928592909190611d0890830139611312565b6001600160a01b03831660008181526006602052604080822080546001600160601b0319166001600160601b03959095169490941790935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110e6908590611b04565b60405180910390a35050565b816001600160a01b0316836001600160a01b03161415801561111d57506000816001600160601b0316115b1561068c576001600160a01b038316156111d5576001600160a01b03831660009081526009602052604081205463ffffffff16908161115d57600061119c565b6001600160a01b0385166000908152600860209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b905060006111c382856040518060600160405280602d8152602001611bab602d9139610e13565b90506111d18684848461134e565b5050505b6001600160a01b0382161561068c576001600160a01b03821660009081526009602052604081205463ffffffff16908161121057600061124f565b6001600160a01b0384166000908152600860209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b9050600061127682856040518060600160405280602c8152602001611c2a602c9139611312565b9050610c8f8584848461134e565b6001600160a01b03808316600081815260076020818152604080842080546006845282862054949093528787166001600160a01b031984168117909155905191909516946001600160601b039092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46113088284836110f2565b50505050565b4690565b6000838301826001600160601b0380871690831610156113455760405162461bcd60e51b815260040161062e91906117c8565b50949350505050565b600061137243604051806060016040528060398152602001611b4860399139611503565b905060008463ffffffff161180156113bb57506001600160a01b038516600090815260086020908152604080832063ffffffff6000198901811685529252909120548282169116145b1561141a576001600160a01b0385166000908152600860209081526040808320600019880163ffffffff168452909152902080546fffffffffffffffffffffffff000000001916600160201b6001600160601b038516021790556114b9565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000818152600883528781208c871682528352878120965187549451909516600160201b026fffffffffffffffffffffffff000000001995871663ffffffff19958616179590951694909417909555938252600990935292909220805460018801909316929091169190911790555b846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72484846040516114f4929190611b18565b60405180910390a25050505050565b600081600160201b8410610e0b5760405162461bcd60e51b815260040161062e91906117c8565b604080518082019091526000808252602082015290565b80356001600160a01b038116811461046f57600080fd5b600060208284031215611569578081fd5b610ab48383611541565b60008060408385031215611585578081fd5b61158f8484611541565b915061159e8460208501611541565b90509250929050565b6000806000606084860312156115bb578081fd5b83356115c681611b32565b925060208401356115d681611b32565b929592945050506040919091013590565b600080604083850312156115f9578182fd5b6116038484611541565b946020939093013593505050565b60008060008060008060c08789031215611629578182fd5b6116338888611541565b95506020870135945060408701359350606087013560ff81168114611656578283fd5b9598949750929560808101359460a0909101359350915050565b60008060408385031215611682578182fd5b61168c8484611541565b9150602083013563ffffffff811681146116a4578182fd5b809150509250929050565b60008083546001808216600081146116ce57600181146116e557611714565b60ff198316865260028304607f1686019350611714565b600283048786526020808720875b8381101561170c5781548a8201529085019082016116f3565b505050860193505b509195945050505050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b9384526001600160a01b039290921660208401526040830152606082015260800190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b818110156117f4578581018301518582016040015282016117d8565b818111156118055783604083870101525b50601f01601f1916929092016040019392505050565b6020808252602b908201527f46696e61546f6b656e3a3a64656c656761746542795369673a207369676e617460408201526a1d5c9948195e1c1a5c995960aa1b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526027908201527f46696e61546f6b656e3a3a64656c656761746542795369673a20696e76616c6960408201526664206e6f6e636560c81b606082015260800190565b6020808252603f908201527f46696e61546f6b656e3a3a5f7472616e73666572546f6b656e733a2063616e6e60408201527f6f74207472616e7366657220746f20746865207a65726f206164647265737300606082015260800190565b60208082526023908201527f46696e61546f6b656e3a206d696e7420746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602c908201527f46696e61546f6b656e3a3a6765745072696f72566f7465733a206e6f7420796560408201526b1d0819195d195c9b5a5b995960a21b606082015260800190565b6020808252602b908201527f46696e61546f6b656e3a3a64656c656761746542795369673a20696e76616c6960408201526a64207369676e617475726560a81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526041908201527f46696e61546f6b656e3a3a5f7472616e73666572546f6b656e733a2063616e6e60408201527f6f74207472616e736665722066726f6d20746865207a65726f206164647265736060820152607360f81b608082015260a00190565b63ffffffff91909116815260200190565b63ffffffff9290921682526001600160601b0316602082015260400190565b60ff91909116815260200190565b6001600160601b0391909116815260200190565b6001600160601b0392831681529116602082015260400190565b6001600160a01b03811681146106b657600080fdfe46696e61546f6b656e3a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d6265722065786365656473203332206269747346696e61546f6b656e3a3a617070726f76653a20616d6f756e742065786365656473203936206269747346696e61546f6b656e3a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f777346696e61546f6b656e3a3a6d696e743a20616d6f756e742065786365656473203936206269747346696e61546f6b656e3a3a7472616e736665723a20616d6f756e742065786365656473203936206269747346696e61546f6b656e3a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f777346696e61546f6b656e3a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e636546696e61546f6b656e3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e636546696e61546f6b656e3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f777346696e613a3a5f6d696e743a206d696e742062616c616e636520616d6f756e74206f766572666c6f7773a2646970667358221220b6c21b84859d72528d578e8bdffe4fb50639f2715147bd8c3fec285f42f1af0d64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c8063715018a6116100c3578063b4b5ea571161007c578063b4b5ea57146102ae578063c3cda520146102c1578063dd62ed3e146102d4578063e7a324dc146102e7578063f1127ed8146102ef578063f2fde38b146103105761014d565b8063715018a614610250578063782d6fe1146102585780637ecebe00146102785780638da5cb5b1461028b57806395d89b4114610293578063a9059cbb1461029b5761014d565b8063313ce56711610115578063313ce567146101c057806340c10f19146101d5578063587cde1e146101ea5780635c19a95c1461020a5780636fcfff451461021d57806370a082311461023d5761014d565b806306fdde0314610152578063095ea7b31461017057806318160ddd1461019057806320606b70146101a557806323b872dd146101ad575b600080fd5b61015a610323565b60405161016791906117c8565b60405180910390f35b61018361017e3660046115e7565b6103b6565b604051610167919061174e565b610198610475565b6040516101679190611759565b61019861047b565b6101836101bb3660046115a7565b61049f565b6101c86105e6565b6040516101679190611af6565b6101e86101e33660046115e7565b6105ef565b005b6101fd6101f8366004611558565b610691565b604051610167919061173a565b6101e8610218366004611558565b6106ac565b61023061022b366004611558565b6106b9565b6040516101679190611ac6565b61019861024b366004611558565b6106d1565b6101e86106f5565b61026b6102663660046115e7565b61077e565b6040516101679190611b04565b610198610286366004611558565b61098c565b6101fd61099e565b61015a6109ad565b6101836102a93660046115e7565b610a0e565b61026b6102bc366004611558565b610a4a565b6101e86102cf366004611611565b610abb565b6101986102e2366004611573565b610c97565b610198610ccb565b6103026102fd366004611670565b610cef565b604051610167929190611ad7565b6101e861031e366004611558565b610d24565b60028054604080516020601f60001961010060018716150201909416859004938401819004810282018101909252828152606093909290918301828280156103ac5780601f10610381576101008083540402835291602001916103ac565b820191906000526020600020905b81548152906001019060200180831161038f57829003601f168201915b5050505050905090565b6000806000198314156103cc57506000196103f1565b6103ee836040518060600160405280602a8152602001611b81602a9139610de4565b90505b3360008181526005602090815260408083206001600160a01b03891680855292529182902080546001600160601b0319166001600160601b03861617905590519091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610461908590611b04565b60405180910390a360019150505b92915050565b60015490565b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6001600160a01b03831660009081526005602090815260408083203380855290835281842054825160608101909352602a80845291936001600160601b039091169285926104f79288929190611b8190830139610de4565b9050866001600160a01b0316836001600160a01b03161415801561052457506001600160601b0382811614155b156105ce57600061054e8383604051806080016040528060428152602001611c5660429139610e13565b6001600160a01b038981166000818152600560209081526040808320948a16808452949091529081902080546001600160601b0319166001600160601b0386161790555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906105c4908590611b04565b60405180910390a3505b6105d9878783610e52565b5060019695505050505050565b60045460ff1690565b6105f7610ff8565b6001600160a01b031661060861099e565b6001600160a01b0316146106375760405162461bcd60e51b815260040161062e90611a2a565b60405180910390fd5b600061065b82604051806060016040528060278152602001611bd860279139610de4565b90506106678382610ffc565b6001600160a01b0380841660009081526007602052604081205461068c9216836110f2565b505050565b6007602052600090815260409020546001600160a01b031681565b6106b63382611284565b50565b60096020526000908152604090205463ffffffff1681565b6001600160a01b03166000908152600660205260409020546001600160601b031690565b6106fd610ff8565b6001600160a01b031661070e61099e565b6001600160a01b0316146107345760405162461bcd60e51b815260040161062e90611a2a565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600043821061079f5760405162461bcd60e51b815260040161062e90611993565b6001600160a01b03831660009081526009602052604090205463ffffffff16806107cd57600091505061046f565b6001600160a01b038416600090815260086020908152604080832063ffffffff600019860181168552925290912054168310610849576001600160a01b03841660009081526008602090815260408083206000199490940163ffffffff1683529290522054600160201b90046001600160601b0316905061046f565b6001600160a01b038416600090815260086020908152604080832083805290915290205463ffffffff1683101561088457600091505061046f565b600060001982015b8163ffffffff168163ffffffff16111561094757600282820363ffffffff160481036108b661152a565b506001600160a01b038716600090815260086020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b031691810191909152908714156109225760200151945061046f9350505050565b805163ffffffff1687111561093957819350610940565b6001820392505b505061088c565b506001600160a01b038516600090815260086020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b600a6020526000908152604090205481565b6000546001600160a01b031690565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103ac5780601f10610381576101008083540402835291602001916103ac565b600080610a33836040518060600160405280602b8152602001611bff602b9139610de4565b9050610a40338583610e52565b5060019392505050565b6001600160a01b03811660009081526009602052604081205463ffffffff1680610a75576000610ab4565b6001600160a01b0383166000908152600860209081526040808320600019850163ffffffff168452909152902054600160201b90046001600160601b03165b9392505050565b60007f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666002604051610aed91906116af565b6040518091039020610afd61130e565b30604051602001610b119493929190611786565b60405160208183030381529060405280519060200120905060007fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf888888604051602001610b629493929190611762565b60405160208183030381529060405280519060200120905060008282604051602001610b8f92919061171f565b604051602081830303815290604052805190602001209050600060018288888860405160008152602001604052604051610bcc94939291906117aa565b6020604051602081039080840390855afa158015610bee573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610c215760405162461bcd60e51b815260040161062e906119df565b6001600160a01b0381166000908152600a602052604090208054600181019091558914610c605760405162461bcd60e51b815260040161062e906118ac565b87421115610c805760405162461bcd60e51b815260040161062e9061181b565b610c8a818b611284565b505050505b505050505050565b6001600160a01b0391821660009081526005602090815260408083209390941682529190915220546001600160601b031690565b7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b600860209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b610d2c610ff8565b6001600160a01b0316610d3d61099e565b6001600160a01b031614610d635760405162461bcd60e51b815260040161062e90611a2a565b6001600160a01b038116610d895760405162461bcd60e51b815260040161062e90611866565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b600081600160601b8410610e0b5760405162461bcd60e51b815260040161062e91906117c8565b509192915050565b6000836001600160601b0316836001600160601b031611158290610e4a5760405162461bcd60e51b815260040161062e91906117c8565b505050900390565b6001600160a01b038316610e785760405162461bcd60e51b815260040161062e90611a5f565b6001600160a01b038216610e9e5760405162461bcd60e51b815260040161062e906118f3565b6001600160a01b03831660009081526006602090815260409182902054825160608101909352603b808452610ee9936001600160601b039092169285929190611c9890830139610e13565b6001600160a01b03848116600090815260066020908152604080832080546001600160601b0319166001600160601b03968716179055928616825290829020548251606081019093526035808452610f519491909116928592909190611cd390830139611312565b6001600160a01b038381166000818152600660205260409081902080546001600160601b0319166001600160601b0395909516949094179093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610fbe908590611b04565b60405180910390a36001600160a01b0380841660009081526007602052604080822054858416835291205461068c929182169116836110f2565b3390565b6001600160a01b0382166110225760405162461bcd60e51b815260040161062e90611950565b600180546001600160601b038381169091019091556001600160a01b03831660009081526006602090815260409182902054825160608101909352602a80845261107c9491909116928592909190611d0890830139611312565b6001600160a01b03831660008181526006602052604080822080546001600160601b0319166001600160601b03959095169490941790935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906110e6908590611b04565b60405180910390a35050565b816001600160a01b0316836001600160a01b03161415801561111d57506000816001600160601b0316115b1561068c576001600160a01b038316156111d5576001600160a01b03831660009081526009602052604081205463ffffffff16908161115d57600061119c565b6001600160a01b0385166000908152600860209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b905060006111c382856040518060600160405280602d8152602001611bab602d9139610e13565b90506111d18684848461134e565b5050505b6001600160a01b0382161561068c576001600160a01b03821660009081526009602052604081205463ffffffff16908161121057600061124f565b6001600160a01b0384166000908152600860209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b9050600061127682856040518060600160405280602c8152602001611c2a602c9139611312565b9050610c8f8584848461134e565b6001600160a01b03808316600081815260076020818152604080842080546006845282862054949093528787166001600160a01b031984168117909155905191909516946001600160601b039092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a46113088284836110f2565b50505050565b4690565b6000838301826001600160601b0380871690831610156113455760405162461bcd60e51b815260040161062e91906117c8565b50949350505050565b600061137243604051806060016040528060398152602001611b4860399139611503565b905060008463ffffffff161180156113bb57506001600160a01b038516600090815260086020908152604080832063ffffffff6000198901811685529252909120548282169116145b1561141a576001600160a01b0385166000908152600860209081526040808320600019880163ffffffff168452909152902080546fffffffffffffffffffffffff000000001916600160201b6001600160601b038516021790556114b9565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000818152600883528781208c871682528352878120965187549451909516600160201b026fffffffffffffffffffffffff000000001995871663ffffffff19958616179590951694909417909555938252600990935292909220805460018801909316929091169190911790555b846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72484846040516114f4929190611b18565b60405180910390a25050505050565b600081600160201b8410610e0b5760405162461bcd60e51b815260040161062e91906117c8565b604080518082019091526000808252602082015290565b80356001600160a01b038116811461046f57600080fd5b600060208284031215611569578081fd5b610ab48383611541565b60008060408385031215611585578081fd5b61158f8484611541565b915061159e8460208501611541565b90509250929050565b6000806000606084860312156115bb578081fd5b83356115c681611b32565b925060208401356115d681611b32565b929592945050506040919091013590565b600080604083850312156115f9578182fd5b6116038484611541565b946020939093013593505050565b60008060008060008060c08789031215611629578182fd5b6116338888611541565b95506020870135945060408701359350606087013560ff81168114611656578283fd5b9598949750929560808101359460a0909101359350915050565b60008060408385031215611682578182fd5b61168c8484611541565b9150602083013563ffffffff811681146116a4578182fd5b809150509250929050565b60008083546001808216600081146116ce57600181146116e557611714565b60ff198316865260028304607f1686019350611714565b600283048786526020808720875b8381101561170c5781548a8201529085019082016116f3565b505050860193505b509195945050505050565b61190160f01b81526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b901515815260200190565b90815260200190565b9384526001600160a01b039290921660208401526040830152606082015260800190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b93845260ff9290921660208401526040830152606082015260800190565b6000602080835283518082850152825b818110156117f4578581018301518582016040015282016117d8565b818111156118055783604083870101525b50601f01601f1916929092016040019392505050565b6020808252602b908201527f46696e61546f6b656e3a3a64656c656761746542795369673a207369676e617460408201526a1d5c9948195e1c1a5c995960aa1b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526027908201527f46696e61546f6b656e3a3a64656c656761746542795369673a20696e76616c6960408201526664206e6f6e636560c81b606082015260800190565b6020808252603f908201527f46696e61546f6b656e3a3a5f7472616e73666572546f6b656e733a2063616e6e60408201527f6f74207472616e7366657220746f20746865207a65726f206164647265737300606082015260800190565b60208082526023908201527f46696e61546f6b656e3a206d696e7420746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6020808252602c908201527f46696e61546f6b656e3a3a6765745072696f72566f7465733a206e6f7420796560408201526b1d0819195d195c9b5a5b995960a21b606082015260800190565b6020808252602b908201527f46696e61546f6b656e3a3a64656c656761746542795369673a20696e76616c6960408201526a64207369676e617475726560a81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526041908201527f46696e61546f6b656e3a3a5f7472616e73666572546f6b656e733a2063616e6e60408201527f6f74207472616e736665722066726f6d20746865207a65726f206164647265736060820152607360f81b608082015260a00190565b63ffffffff91909116815260200190565b63ffffffff9290921682526001600160601b0316602082015260400190565b60ff91909116815260200190565b6001600160601b0391909116815260200190565b6001600160601b0392831681529116602082015260400190565b6001600160a01b03811681146106b657600080fdfe46696e61546f6b656e3a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d6265722065786365656473203332206269747346696e61546f6b656e3a3a617070726f76653a20616d6f756e742065786365656473203936206269747346696e61546f6b656e3a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f777346696e61546f6b656e3a3a6d696e743a20616d6f756e742065786365656473203936206269747346696e61546f6b656e3a3a7472616e736665723a20616d6f756e742065786365656473203936206269747346696e61546f6b656e3a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f777346696e61546f6b656e3a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e636546696e61546f6b656e3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e636546696e61546f6b656e3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f777346696e613a3a5f6d696e743a206d696e742062616c616e636520616d6f756e74206f766572666c6f7773a2646970667358221220b6c21b84859d72528d578e8bdffe4fb50639f2715147bd8c3fec285f42f1af0d64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",
        "params": {
          "rawAmount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "delegate(address)": {
        "params": {
          "delegatee": "The address to delegate votes to"
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "delegatee": "The address to delegate votes to",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "getCurrentVotes(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "getPriorVotes(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "transfer(address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "The standard EIP-20 approval event"
      },
      "DelegateChanged(address,address,address)": {
        "notice": "An event thats emitted when an account changes its delegate"
      },
      "DelegateVotesChanged(address,uint256,uint256)": {
        "notice": "An event thats emitted when a delegate account's vote balance changes"
      },
      "Transfer(address,address,uint256)": {
        "notice": "The standard EIP-20 transfer event"
      }
    },
    "kind": "user",
    "methods": {
      "DELEGATION_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the delegation struct used by the contract"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkpoints(address,uint32)": {
        "notice": "A record of votes checkpoints for each account, by index"
      },
      "delegate(address)": {
        "notice": "Delegate votes from `msg.sender` to `delegatee`"
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates votes from signatory to `delegatee`"
      },
      "delegates(address)": {
        "notice": "A record of each accounts delegate"
      },
      "getCurrentVotes(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "getPriorVotes(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of a block number"
      },
      "mint(address,uint256)": {
        "notice": "Creates `_amount` token to `_to`. Must only be called by the owner (FinaMaster)."
      },
      "nonces(address)": {
        "notice": "A record of states for signing / validating signatures"
      },
      "numCheckpoints(address)": {
        "notice": "The number of checkpoints for each account"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/governance/FinaToken.sol:FinaToken",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5119,
        "contract": "contracts/governance/FinaToken.sol:FinaToken",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5122,
        "contract": "contracts/governance/FinaToken.sol:FinaToken",
        "label": "_name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 5125,
        "contract": "contracts/governance/FinaToken.sol:FinaToken",
        "label": "_symbol",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 5128,
        "contract": "contracts/governance/FinaToken.sol:FinaToken",
        "label": "_decimals",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 5170,
        "contract": "contracts/governance/FinaToken.sol:FinaToken",
        "label": "allowances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint96))"
      },
      {
        "astId": 5175,
        "contract": "contracts/governance/FinaToken.sol:FinaToken",
        "label": "balances",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint96)"
      },
      {
        "astId": 5180,
        "contract": "contracts/governance/FinaToken.sol:FinaToken",
        "label": "delegates",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5192,
        "contract": "contracts/governance/FinaToken.sol:FinaToken",
        "label": "checkpoints",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)5185_storage))"
      },
      {
        "astId": 5197,
        "contract": "contracts/governance/FinaToken.sol:FinaToken",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 5214,
        "contract": "contracts/governance/FinaToken.sol:FinaToken",
        "label": "nonces",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint96))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint96))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint96)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)5185_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct FinaToken.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Checkpoint)5185_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_address,t_uint96)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint96)",
        "numberOfBytes": "32",
        "value": "t_uint96"
      },
      "t_mapping(t_uint32,t_struct(Checkpoint)5185_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct FinaToken.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)5185_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Checkpoint)5185_storage": {
        "encoding": "inplace",
        "label": "struct FinaToken.Checkpoint",
        "members": [
          {
            "astId": 5182,
            "contract": "contracts/governance/FinaToken.sol:FinaToken",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5184,
            "contract": "contracts/governance/FinaToken.sol:FinaToken",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}